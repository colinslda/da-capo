// Import Firebase modules
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js";
import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-auth.js";
import { getFirestore, doc, getDoc, collection, addDoc, onSnapshot, query, orderBy, deleteDoc, getDocs } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-firestore.js"; // Import Firestore modules

// Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyDJFjq6AA-30mrI5Yagpy0n11fk6Wceo0k",
    authDomain: "dacapo-4e852.firebaseapp.com",
    projectId: "dacapo-4e852",
    storageBucket: "dacapo-4e852.firebasestorage.app",
    messagingSenderId: "68504525719",
    appId: "1:68504525719:web:65794607064db1fff9c2d2",
    measurementId: "G-58VM0TCQ1M"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// --- R√©pertoire Functionality ---

// √âcouteur d'√©v√©nement pour le formulaire d'ajout de pi√®ce
document.getElementById('addPiece')?.addEventListener('submit', async (e) => {
    e.preventDefault(); // Emp√™cher la soumission par d√©faut du formulaire

    const pieceTitle = document.getElementById('pieceTitle').value.trim();
    const composer = document.getElementById('composer').value.trim();
    const pieceType = document.getElementById('pieceType').value;
    const notes = document.getElementById('notes').value.trim();

    if (!pieceTitle || !composer || !pieceType) {
        alert("Veuillez remplir tous les champs obligatoires (Titre, Compositeur, Cat√©gorie).");
        return; // Arr√™ter la fonction si les champs obligatoires ne sont pas remplis
    }

    try {
        const user = auth.currentUser;
        if (!user) {
            console.error("Utilisateur non connect√©.");
            return;
        }

        // Ajouter la pi√®ce √† Firestore dans la sous-collection "pieces" de l'utilisateur
        await addDoc(collection(db, "users", user.uid, "pieces"), {
            title: pieceTitle,
            composer: composer,
            type: pieceType,
            notes: notes,
            createdAt: new Date() // Ajouter un timestamp pour le tri par d√©faut
        });

        // R√©initialiser les champs du formulaire apr√®s l'ajout
        document.getElementById('pieceTitle').value = '';
        document.getElementById('composer').value = '';
        document.getElementById('pieceType').value = '';
        document.getElementById('notes').value = '';

        // Recharger la liste des pi√®ces pour afficher la nouvelle pi√®ce ajout√©e
        loadPiecesList();
        alert("Pi√®ce ajout√©e avec succ√®s !");


    } catch (error) {
        console.error("Erreur lors de l'ajout de la pi√®ce √† Firestore:", error);
        alert("Erreur lors de l'ajout de la pi√®ce.");
    }
});

// Fonction pour charger et afficher la liste des pi√®ces depuis Firestore
async function loadPiecesList() {
    const piecesListDiv = document.getElementById('piecesList');
    const emptyListMessage = document.getElementById('emptyListMessage');

    piecesListDiv.innerHTML = ''; // Vider la liste actuelle avant de la recharger

    const user = auth.currentUser;
    if (!user) {
        console.error("Utilisateur non connect√©.");
        return;
    }

    const piecesRef = collection(db, "users", user.uid, "pieces");
    const q = query(piecesRef, orderBy("createdAt", "desc")); // Trier par date de cr√©ation, du plus r√©cent au plus ancien

    try {
        const querySnapshot = await getDocs(q);
        if (querySnapshot.empty) {
            emptyListMessage.classList.remove('hidden'); // Afficher le message "liste vide"
        } else {
            emptyListMessage.classList.add('hidden'); // Cacher le message "liste vide" si des pi√®ces existent
            querySnapshot.forEach(doc => {
                const pieceData = doc.data();
                const pieceElement = createPieceElement(doc.id, pieceData); // Cr√©er l'√©l√©ment HTML pour la pi√®ce
                piecesListDiv.appendChild(pieceElement); // Ajouter l'√©l√©ment √† la liste
            });
        }
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des pi√®ces depuis Firestore:", error);
        alert("Erreur lors du chargement du r√©pertoire.");
    }
}


// Fonction pour cr√©er un √©l√©ment HTML pour afficher une pi√®ce
function createPieceElement(id, data) {
    const pieceCard = document.createElement('div');
    pieceCard.className = 'piece-card bg-white p-6 rounded-2xl shadow-md border-2 border-gray-200 hover:border-purple-300 transition-all transform hover:-translate-y-1 cursor-pointer';
    pieceCard.innerHTML = `
        <h3 class="font-bold text-xl text-purple-700 mb-2">${data.title}</h3>
        <p class="text-gray-600 mb-1">Compositeur: ${data.composer}</p>
        <p class="text-gray-600 mb-3">Cat√©gorie: ${data.type}</p>
        <p class="text-gray-500 text-sm truncate">${data.notes ? data.notes : 'Aucune note'}</p>
        <div class="flex justify-end mt-4">
            <button class="btn-danger btn-small delete-piece-btn" data-id="${id}">üóëÔ∏è Supprimer</button>
        </div>
    `;

    // √âcouteur d'√©v√©nement pour le bouton "Supprimer" (d√©l√©gu√©)
    pieceCard.querySelector('.delete-piece-btn').addEventListener('click', async (event) => {
        event.stopPropagation(); // Emp√™cher la propagation de l'√©v√©nement au parent (pieceCard)
        const pieceIdToDelete = event.target.dataset.id;
        if (confirm("Voulez-vous vraiment supprimer cette pi√®ce de votre r√©pertoire ?")) {
            try {
                const user = auth.currentUser;
                if (!user) {
                    console.error("Utilisateur non connect√©.");
                    return;
                }
                await deleteDoc(doc(db, "users", user.uid, "pieces", pieceIdToDelete));
                loadPiecesList(); // Recharger la liste apr√®s suppression
                alert("Pi√®ce supprim√©e avec succ√®s.");
            } catch (error) {
                console.error("Erreur lors de la suppression de la pi√®ce:", error);
                alert("Erreur lors de la suppression de la pi√®ce.");
            }
        }
    });


    return pieceCard;
}


// V√©rifier la session et charger les infos de l'utilisateur
function checkUserSession() {
    onAuthStateChanged(auth, async (user) => {
        if (user) {
            console.log("Utilisateur connect√© :", user);
            await loadUserData(user);
            loadPiecesList(); // Charger la liste des pi√®ces apr√®s la connexion
        } else {
            console.log("Aucune session trouv√©e, redirection vers la connexion.");
            window.location.href = "/login.html";
        }
    });
}

// Charger les infos utilisateur dans le profil
async function loadUserData(user) {
    // ... (fonction loadUserData inchang√©e) ...
     if (!user) return;

    document.getElementById("userEmail").textContent = user.email;

    try {
        const userDoc = await getDoc(doc(db, "users", user.uid)); // R√©cup√©rer le document Firestore
        if (userDoc.exists()) {
            const userData = userDoc.data();
            document.getElementById("userFirstName").textContent = userData.firstName || "Pr√©nom inconnu";
            document.getElementById("userLastName").textContent = userData.lastName || "Nom inconnu";
        } else {
            console.log("Document utilisateur non trouv√© dans Firestore");
            document.getElementById("userFirstName").textContent = "Pr√©nom inconnu";
            document.getElementById("userLastName").textContent = "Nom inconnu";
        }

    } catch (err) {
        console.error("Erreur lors du chargement des donn√©es utilisateur depuis Firestore :", err);
        document.getElementById("userFirstName").textContent = "Pr√©nom inconnu";
        document.getElementById("userLastName").textContent = "Nom inconnu";
    }
}


// Sauvegarder la biographie (COMMENT√â - inchang√©)
document.getElementById("saveBio")?.addEventListener("click", async () => {
    alert("Fonction de sauvegarde de la bio d√©sactiv√©e pour Firebase. √Ä r√©impl√©menter si n√©cessaire.");
});

// D√©connexion et redirection vers login.html (inchang√©)
document.getElementById("logout")?.addEventListener("click", async () => {
    try {
        await signOut(auth);
        window.location.href = "/login.html";
    } catch (error) {
        console.error("Erreur lors de la d√©connexion:", error);
        alert("Erreur lors de la d√©connexion.");
    }
});

// V√©rifier la session au chargement de l'application (inchang√©)
checkUserSession();

// ‚è± MINUTEUR ‚è± (inchang√©)
let timerInterval;
// ... (fonctions minuteur inchang√©es) ...

// üéµ M√âTRONOME üéµ (inchang√©)
class Metronome {
   // ... (classe Metronome inchang√©e) ...
}
let metronome = null;
document.addEventListener('DOMContentLoaded', () => {
   // ... (initialisation m√©tronome inchang√©e) ...
});


// Navigation entre les onglets (inchang√©)
function switchTab(tabId) {
   // ... (fonction switchTab inchang√©e) ...
}

// üîπ Service Worker pour le PWA (inchang√©)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js');
    });
}
